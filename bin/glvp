#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use Getopt::Long qw/GetOptions/;
use Pod::Usage qw/pod2usage/;
use File::Spec::Functions qw/catfile tmpdir/;
use File::Copy ();
use File::Temp ();
use File::Basename qw/dirname basename/;
use LWP::Simple ();
use FileHandle;

# Non-CORE
use Web::Scraper;
use URI;



# TODO
# - Caching HTML file under ~/.glvp
# - Currently behave like $force == 1.
# Desired behavior is:
# 1. Install plugins if its revision is old.
#    if no revision is saved or $force == 1, fetch all plugins.
# 2. Save those revisions to ~/.glvp/revision/{plugin_name}


sub usage () {
    pod2usage(-verbose => 2);
}

sub assert {
    my ($cond, $msg) = @_;
    die "$msg\n" unless $cond;
}



{
    package _Log;

    sub new {
        my ($pkg, %opt) = @_;

        my $fh = defined $opt{filehandle} ? $opt{filehandle} : \*STDOUT;
        $opt{filehandle} = FileHandle->new_from_fd(fileno($fh), 'w')
                            or die "$!: Can't open logging filehandle.\n";
        $opt{verbosity}  = defined $opt{verbosity} ? $opt{verbosity} : 1;


        bless \%opt, $pkg;
    }

    sub say {
        my ($self, $level, @msg) = @_;
        $self->print($level, @msg, "\n");
    }

    sub print {
        my ($self, $level, @msg) = @_;
        if ($self->{verbosity} >= $level) {
            print {$self->{filehandle}} @msg;
        }
    }

    sub autoflush {
        my $self = shift;
        $self->{filehandle}->autoflush(@_);
    }
}

my $LOG;
my $DIRLIST_URI  = 'http://coderepos.org/share/browser/lang/javascript/vimperator-plugins/%s';
my $LATEST_PLUGIN_URI = 'http://svn.coderepos.org/share/lang/javascript/vimperator-plugins/%s/%s';



sub moo {
    my ($verbosity) = @_;
    die <<MOO
         (__) 
         (oo) 
   /------\/ 
  / |    ||   
 *  /\---/\ 
    ~~   ~~   
...."Have you mooed today?"...
MOO
}

sub find_vimp_dir {
    if ($^O eq 'MSWin32') {
        exists $ENV{HOME}
        && -d $ENV{HOME}
        && (-d ($_ = catfile $ENV{HOME}, '.vimperator')
            || -d ($_ = catfile $ENV{HOME}, '_vimperator')
            || -d ($_ = catfile $ENV{HOME}, 'vimperator'))
        ? $_
        : undef
    }
    else {
        assert defined $ENV{HOME}, "'$ENV{HOME}' is not set?";

        -d ($_ = catfile($ENV{HOME}, '.vimperator'))
        ? $_
        : undef
    }
}

sub get_vimp_plugins {
    my ($vimp_dir) = @_;

    my @plugins = glob "$vimp_dir/plugin/*.js";

    $LOG->say(2, "installed plugins:");
    $LOG->say(2, "  $_") for @plugins ? @plugins : q/[No plugin(s) to be installed]/;

    @plugins;
}

sub get_tempdir {
    my ($tempdir_path) = @_;

    my ($dir, $template) = do {
        if (defined $tempdir_path) {
            (dirname($tempdir_path), basename($tempdir_path));
        }
        else {
            # Not specified by option '-t'.
            my $tempdir_basename = sprintf 'glvs%s-XXXXXXX', exists $ENV{USER} ? "-$ENV{USER}" : '';
            (tmpdir, $tempdir_basename);
        }
    };

    unless (-d $dir) {
        $dir = tmpdir;
        warn "$dir: No such directory. Use $dir instead.\n";
    }

    my $tempdir = File::Temp::tempdir($template, DIR => $dir);
    assert -d $tempdir, "$tempdir: No such directory";

    $tempdir;
}

sub get_plugin_info {
    my ($coderepos_uri) = @_;

    my $dirlist = scraper {
        process 'table#dirlist tbody tr',
                'dirlist[]' => scraper {
                    process 'td.name a.file',
                            name => 'TEXT';
                    process 'td.rev a',
                            rev => 'TEXT';
                    process 'td.change .author',
                            change_author => 'TEXT';
                    process 'td.change .change',
                            change_comment => 'TEXT';
                };
        result 'dirlist';
    }->scrape($coderepos_uri);

    map {
        my $name = delete $_->{name};
        $name => $_;
    } grep {
        # For filtering plugin file.
        exists $_->{name}
    } @$dirlist;
}

sub fetch_plugins {
    my ($plugins, $save_dir, $branch) = @_;
    my @fetched_path;

    my $uri_path = defined $branch ? "branches/$branch" : "trunk";
    my $coderepos_uri = URI->new(sprintf $DIRLIST_URI, $uri_path);

    $LOG->say(2, "CodeRepos URI = $coderepos_uri");
    $LOG->print(1, "fetching plugins' list ... ");
    my %plugin_vs_info = get_plugin_info $coderepos_uri;
    $LOG->say(1, "done.");

    for my $plugin_name (sort map { basename $_ } @$plugins) {
        $LOG->print(1, "fetching $plugin_name ... ");
        unless (exists $plugin_vs_info{$plugin_name}) {
            warn "$plugin_name is not found in CodeRepos list. skip.\n";
            next;
        }

        my $uri = sprintf $LATEST_PLUGIN_URI, $uri_path, $plugin_name;
        my $path = catfile $save_dir, $plugin_name;
        my $response_code = LWP::Simple::getstore $uri, $path;
        if (LWP::Simple::is_success $response_code) {
            push @fetched_path, $path;
            $LOG->say(1, "saved to $path");
            assert -f $path, "$path: failed to save a file";
        }
        else {
            warn "failed to save $plugin_name to $path\n";
        }
    }

    $LOG->say(2, "fetched:");
    $LOG->say(2, "  $_") for @fetched_path ? @fetched_path : q/[No plugin(s) to be fetched]/;

    @fetched_path;
}

sub install_plugins {
    my ($fetched_plugins, $install_dir) = @_;

    $LOG->say(1, "installing plugins...");
    for my $path (@$fetched_plugins) {
        my ($from, $to) = ($path, catfile $install_dir, basename $path);

        $LOG->print(2, "copying: $from => $to ... ");

        if (File::Copy::copy $from, $to) {
            $LOG->say(2, "succeeded.");
        }
        else {
            $LOG->say(2, "failed.");
            warn "failed to copy: $from => $to\n";
        }
    }
    $LOG->say(1, "done.");
}

sub update_vimp_plugins {
    my %opt = @_;

    $LOG->say(1, "vimp_dir: $opt{dir}");

    # Get my installed plugins.
    my @plugins = get_vimp_plugins $opt{dir};
    unless (@plugins) {
        $LOG->say(1, "No plugins installed. exit.");
        exit;
    }

    # Set up $tempdir.
    my $tempdir = get_tempdir $opt{tempdir};

    # Fetch plugins.
    my @fetched = fetch_plugins [@plugins], $tempdir, $opt{branch};
    unless (@fetched) {
        $LOG->say(1, "No plugins fetched. exit.");
        exit;
    }

    # Install plugins.
    install_plugins [@fetched], catfile $opt{dir}, 'plugin';
}




my $needhelp = 0;
my $vimp_dir = find_vimp_dir;
my $verbosity = 1;
my $tempdir_path;
my $check_only = 0;
my $backup = 0;
my $force = 0;
my $branch;
GetOptions(
    'h|help'
        => \$needhelp,
    'd|dir=s'
        => \$vimp_dir,
    'v|verbose'
        => sub { $verbosity++ },
    'q|quiet'
        => sub { $verbosity-- },
    't|temp-dir=s'
        => \$tempdir_path,
    'c|check-only'    # TODO
        => \$check_only,
    'b|backup'    # TODO
        => \$backup,
    'f|force'    # TODO
        => \$force,
    'b|branch=s'
        => \$branch,
) or usage;
usage if $needhelp;



assert defined $vimp_dir, <<EOM;
Not found your .vimperator directory.
Please specify '-d {vimp_dir}'.
EOM


if ($verbosity < 0) {
    moo $verbosity;
}

$LOG = _Log->new(verbosity => $verbosity, filehandle => \*STDOUT);
$LOG->autoflush(1);

update_vimp_plugins(
    dir => $vimp_dir,
    tempdir => $tempdir_path,
    check_only => $check_only,
    backup => $backup,
    force => $force,
    branch => $branch,
);
__END__

=head1 NAME

    glvp - Get Latest Vimperator Plugin



=head1 SYNOPSIS

    $ glvp [OPTIONS]



=head1 OPTIONS

=over

=item -h, --help

Show this help text.

=item -d, --dir

Your .vimperator directory.

=item -v, --verbose

Increment verbosity.

=item -q, --quiet

Decrement verbosity.

=item -t {dir}, --temp-dir {dir}

Template string like C</tmp/glvp-XXXX>

=item -b {branch version}, --branch {branch version}

If this option is specified,
Build CodeRepos URI as C<http://coderepos.org/share/browser/lang/javascript/vimperator-plugins/branches/{branch version}>

=back



=head1 AUTHOR

tyru <tyru.exe@gmail.com>
