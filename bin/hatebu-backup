#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use DateTime;
use Digest::SHA1 qw(sha1);
use Getopt::Long qw(:config pass_through auto_help);    # pass through unrecognized options.
use HTTP::Request;
use LWP::UserAgent;
use MIME::Base64 qw(encode_base64);
use Pod::Usage;





### Default values ###
%ARGV = (
    mode => 'atom',
    output => 'hatebu.bmk',
    password => undef,
    username => undef,
);

GetOptions(
    'mode=s' => \$ARGV{mode},
    'output=s' => \$ARGV{output},
    'password=s' => \$ARGV{password},
    'username=s' => \$ARGV{username},
);


### Check values ###
if ($ARGV{mode} !~ /^(atom|rss|bookmarks)$/) {
    warn "warning: --mode: use default 'atom'.\n";
    $ARGV{mode} = "atom";
}

### Get values from user interactively ###
if (eval { require Config::Pit }) {
    print "using Config::Pit for getting your hatena account information.\n";
    my $c = Config::Pit::pit_get('hatena.ne.jp', require => {
        username => '<your username on hatena>',
        password => '<your password on hatena>',
    });
    $ARGV{username} = $c->{username};
    $ARGV{password} = $c->{password};
}
unless (defined $ARGV{username}) {
    print "put your hatena username:";
    chomp($ARGV{username} = <STDIN>);
}
until (defined $ARGV{password}) {
    eval { require Term::ReadPassword };
    if ($@) {
        die "Term::ReadPassword is required "
          . "for password input from terminal: $@\n";
    }
    print "using Term::ReadPassword for password prompt.\n";
    $ARGV{password} = Term::ReadPassword::read_password("put your password:");
}


import_hatena_bookmark(\%ARGV);

exit 0;



sub import_hatena_bookmark {
    my $data = shift;

    # wsse authentication
    my $nonce = sha1(sha1(time() . {} . rand() . $$));
    my $now = DateTime->now->iso8601 . 'Z';
    my $digest = encode_base64(sha1($nonce . $now . $data->{password} || ''), '');
    my $credentials =
        sprintf(qq(UsernameToken Username="%s", PasswordDigest="%s", Nonce="%s", Created="%s"),
                $data->{username}, $digest,  encode_base64($nonce, ''), $now);

    my $url = 'http://b.hatena.ne.jp/dump' .
                ($data->{mode} eq "atom" ? "" : "?mode=" . $data->{mode});
    my $req = HTTP::Request->new(GET => $url);
    $req->header(Accept => 'application/x.atom+xml, application/xml, text/xml, */*');
    $req->header('X-WSSE' => $credentials);

    # saving data
    my $ua = LWP::UserAgent->new;
    $ua->show_progress(1);
    my $res = $ua->request($req);
    unless ($res->is_success) {
        die $res->status_line . "\n";
    }
    my $FH = IO::File->new($data->{output}, 'w')
            or die sprintf "can't open '%s'.\n", $data->{output};
    $FH->print($res->content);
    $FH->close;
}


__END__

=head1 NAME

    hatebu.pl - backup hatena bookmarks to local path


=head1 SYNOPSIS

    hatebu.pl [-h|--help] [-u username] [-p password] [-m mode] [-o file]


=head1 OPTIONS

=over 6

=item -u, --user

hatena username.

=item -p, --pass

hatena password.

=item -h, --help

show help.

=item -o, --output

default:"hatebu.bmk"
hatena bookmark file path.

=item -m, --mode I<modes>

default:"atom"
modes:"atom", "rss", bookmarks"
hatena bookmark file's mode.

=back
